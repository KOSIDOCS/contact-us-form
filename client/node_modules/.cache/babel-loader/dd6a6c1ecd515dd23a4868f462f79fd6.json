{"ast":null,"code":"var _jsxFileName = \"/home/kosidocs/Web Development/React-Development/contact-us-form/src/component/ContactBody/Right-column/TextInput.jsx\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { saturate, darken } from \"polished\";\nimport PropTypes from \"prop-types\";\n\nclass TextInput extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: \"\",\n      dirty: false,\n      errors: []\n    };\n\n    this.hasChanged = e => {\n      e.preventDefault(); // destructure props - assign default dummy functions to validator and onStateChanged props\n\n      const {\n        label,\n        required = false,\n        validator = f => f,\n        onStateChanged = f => f\n      } = this.props;\n      const value = e.target.value;\n      const isEmpty = value.length === 0;\n      const requiredMissing = this.state.dirty && required && isEmpty;\n      const inputType = e.target.type;\n      let errors = [];\n\n      if (requiredMissing) {\n        // if required and is empty, add required error to state\n        errors = [...errors, `${label} is required`];\n      } else if (\"function\" === typeof validator) {\n        try {\n          validator(value, label);\n        } catch (e) {\n          // if validator throws error, add validation error to state\n          errors = [...errors, e.message];\n        }\n      } else if (inputType === \"tel\") {\n        try {\n          console.log(e.key);\n        } catch (error) {\n          // if validator throws error, add validation error to state\n          errors = [...errors, e.message];\n        }\n      } // update state and call the onStateChanged callback fn after the update\n      // dirty is only changed to true and remains true on and after the first state update\n\n\n      this.setState(({\n        dirty = false\n      }) => ({\n        value,\n        errors,\n        dirty: !dirty || dirty\n      }), () => onStateChanged(this.state));\n    };\n  }\n\n  render() {\n    const {\n      value,\n      dirty,\n      errors\n    } = this.state;\n    const {\n      type,\n      labelId,\n      label,\n      placeholder\n    } = this.props;\n    const hasError = errors.length > 0;\n    const controlClass = [dirty ? hasError ? \"is-invalid\" : \"is-valid\" : \"\"].join(\"\").trim();\n    const controlLabel = [dirty ? hasError ? \"label-invalid\" : \"label-valid\" : \"\"].join(\"\").trim();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: labelId,\n      className: controlLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, label), /*#__PURE__*/React.createElement(Input, {\n      type: type,\n      className: controlClass,\n      id: labelId,\n      placeholder: placeholder,\n      value: value,\n      onChange: this.hasChanged,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }), hasError && /*#__PURE__*/React.createElement(ErrorWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 24\n      }\n    }, errors[0])));\n  }\n\n}\n\nconst Container = styled.div`\n  background: ${saturate(0.3, \"#fff\")};\n  width: 350px;\n  position: relative;\n\n  & .is-invalid {\n    border-bottom: 2px solid ${saturate(0.2, \"#F44C57\")} !important;\n  }\n\n  & .is-valid {\n    border-bottom: 2px solid ${saturate(0.2, \"#472ECD\")} !important;\n  }\n\n  & .label-invalid {\n    color: ${saturate(0.0, \"#A4A2BC\")} !important;\n  }\n\n  & .label-valid {\n    color: ${saturate(0.2, \"#472ECD\")} !important;\n  }\n`;\nconst Input = styled.input`\n  width: 100%;\n  border: 0;\n  outline: none;\n  line-height: 20px;\n  font-size: 22px;\n  padding: 9px 0 15px 0px;\n  font-family: inherit;\n  background: none;\n  color: #151924;\n  caret-color: #332e4b;\n  border-bottom: 2px solid ${saturate(0.0, \"#A4A2BC\")};\n  transition: border-bottom 1s ease-in-out;\n\n  &::placeholder {\n    color: #a4a2bc;\n  }\n`;\nconst Label = styled.label`\n  line-height: 24px;\n  font-size: 16px;\n  font-weight: 500;\n  transition: all 0.3s ease;\n  color: ${darken(0.4, \"#332E4B\")} !important;\n  transition: color 1s ease-in-out;\n`;\nconst ErrorWrapper = styled.div`\n  color: ${darken(0.1, \"#F44C57\")};\n`;\nTextInput.propTypes = {\n  type: PropTypes.oneOf([\"text\", \"email\", \"password\", \"tel\"]).isRequired,\n  labelId: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  validator: PropTypes.func,\n  required: PropTypes.bool,\n  onStateChanged: PropTypes.func\n};\nexport default TextInput;","map":{"version":3,"sources":["/home/kosidocs/Web Development/React-Development/contact-us-form/src/component/ContactBody/Right-column/TextInput.jsx"],"names":["React","Component","styled","saturate","darken","PropTypes","TextInput","state","value","dirty","errors","hasChanged","e","preventDefault","label","required","validator","f","onStateChanged","props","target","isEmpty","length","requiredMissing","inputType","type","message","console","log","key","error","setState","render","labelId","placeholder","hasError","controlClass","join","trim","controlLabel","Container","div","Input","input","Label","ErrorWrapper","propTypes","oneOf","isRequired","string","func","bool"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,UAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,SAAN,SAAwBL,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCM,KAFgC,GAExB;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,KAAK,EAAE,KAApB;AAA2BC,MAAAA,MAAM,EAAE;AAAnC,KAFwB;;AAAA,SAIhCC,UAJgC,GAIlBC,CAAD,IAAO;AAClBA,MAAAA,CAAC,CAACC,cAAF,GADkB,CAGlB;;AACA,YAAM;AACJC,QAAAA,KADI;AAEJC,QAAAA,QAAQ,GAAG,KAFP;AAGJC,QAAAA,SAAS,GAAIC,CAAD,IAAOA,CAHf;AAIJC,QAAAA,cAAc,GAAID,CAAD,IAAOA;AAJpB,UAKF,KAAKE,KALT;AAOA,YAAMX,KAAK,GAAGI,CAAC,CAACQ,MAAF,CAASZ,KAAvB;AACA,YAAMa,OAAO,GAAGb,KAAK,CAACc,MAAN,KAAiB,CAAjC;AACA,YAAMC,eAAe,GAAG,KAAKhB,KAAL,CAAWE,KAAX,IAAoBM,QAApB,IAAgCM,OAAxD;AACA,YAAMG,SAAS,GAAGZ,CAAC,CAACQ,MAAF,CAASK,IAA3B;AAEA,UAAIf,MAAM,GAAG,EAAb;;AAEA,UAAIa,eAAJ,EAAqB;AACnB;AACAb,QAAAA,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAa,GAAEI,KAAM,cAArB,CAAT;AACD,OAHD,MAGO,IAAI,eAAe,OAAOE,SAA1B,EAAqC;AAC1C,YAAI;AACFA,UAAAA,SAAS,CAACR,KAAD,EAAQM,KAAR,CAAT;AACD,SAFD,CAEE,OAAOF,CAAP,EAAU;AACV;AACAF,UAAAA,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAYE,CAAC,CAACc,OAAd,CAAT;AACD;AACF,OAPM,MAOA,IAAIF,SAAS,KAAK,KAAlB,EAAyB;AAC9B,YAAI;AACFG,UAAAA,OAAO,CAACC,GAAR,CAAYhB,CAAC,CAACiB,GAAd;AACD,SAFD,CAEE,OAAOC,KAAP,EAAc;AACd;AACApB,UAAAA,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAYE,CAAC,CAACc,OAAd,CAAT;AACD;AACF,OAnCiB,CAqClB;AACA;;;AACA,WAAKK,QAAL,CACE,CAAC;AAAEtB,QAAAA,KAAK,GAAG;AAAV,OAAD,MAAwB;AAAED,QAAAA,KAAF;AAASE,QAAAA,MAAT;AAAiBD,QAAAA,KAAK,EAAE,CAACA,KAAD,IAAUA;AAAlC,OAAxB,CADF,EAEE,MAAMS,cAAc,CAAC,KAAKX,KAAN,CAFtB;AAID,KA/C+B;AAAA;;AAiDhCyB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAExB,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,QAA2B,KAAKH,KAAtC;AACA,UAAM;AAAEkB,MAAAA,IAAF;AAAQQ,MAAAA,OAAR;AAAiBnB,MAAAA,KAAjB;AAAwBoB,MAAAA;AAAxB,QAAwC,KAAKf,KAAnD;AAEA,UAAMgB,QAAQ,GAAGzB,MAAM,CAACY,MAAP,GAAgB,CAAjC;AACA,UAAMc,YAAY,GAAG,CAAC3B,KAAK,GAAI0B,QAAQ,GAAG,YAAH,GAAkB,UAA9B,GAA4C,EAAlD,EAClBE,IADkB,CACb,EADa,EAElBC,IAFkB,EAArB;AAGA,UAAMC,YAAY,GAAG,CACnB9B,KAAK,GAAI0B,QAAQ,GAAG,eAAH,GAAqB,aAAjC,GAAkD,EADpC,EAGlBE,IAHkB,CAGb,EAHa,EAIlBC,IAJkB,EAArB;AAMA,wBACE,uDACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAEL,OAAhB;AAAyB,MAAA,SAAS,EAAEM,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGzB,KADH,CADF,eAIE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAEW,IADR;AAEE,MAAA,SAAS,EAAEW,YAFb;AAGE,MAAA,EAAE,EAAEH,OAHN;AAIE,MAAA,WAAW,EAAEC,WAJf;AAKE,MAAA,KAAK,EAAE1B,KALT;AAME,MAAA,QAAQ,EAAE,KAAKG,UANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAYGwB,QAAQ,iBAAI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAezB,MAAM,CAAC,CAAD,CAArB,CAZf,CADF,CADF;AAkBD;;AAjF+B;;AAoFlC,MAAM8B,SAAS,GAAGtC,MAAM,CAACuC,GAAI;gBACbtC,QAAQ,CAAC,GAAD,EAAM,MAAN,CAAc;;;;;+BAKPA,QAAQ,CAAC,GAAD,EAAM,SAAN,CAAiB;;;;+BAIzBA,QAAQ,CAAC,GAAD,EAAM,SAAN,CAAiB;;;;aAI3CA,QAAQ,CAAC,GAAD,EAAM,SAAN,CAAiB;;;;aAIzBA,QAAQ,CAAC,GAAD,EAAM,SAAN,CAAiB;;CAlBtC;AAsBA,MAAMuC,KAAK,GAAGxC,MAAM,CAACyC,KAAM;;;;;;;;;;;6BAWExC,QAAQ,CAAC,GAAD,EAAM,SAAN,CAAiB;;;;;;CAXtD;AAmBA,MAAMyC,KAAK,GAAG1C,MAAM,CAACY,KAAM;;;;;WAKhBV,MAAM,CAAC,GAAD,EAAM,SAAN,CAAiB;;CALlC;AASA,MAAMyC,YAAY,GAAG3C,MAAM,CAACuC,GAAI;WACrBrC,MAAM,CAAC,GAAD,EAAM,SAAN,CAAiB;CADlC;AAIAE,SAAS,CAACwC,SAAV,GAAsB;AACpBrB,EAAAA,IAAI,EAAEpB,SAAS,CAAC0C,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,EAAkB,UAAlB,EAA8B,KAA9B,CAAhB,EAAsDC,UADxC;AAEpBf,EAAAA,OAAO,EAAE5B,SAAS,CAAC4C,MAAV,CAAiBD,UAFN;AAGpBlC,EAAAA,KAAK,EAAET,SAAS,CAAC4C,MAAV,CAAiBD,UAHJ;AAIpBd,EAAAA,WAAW,EAAE7B,SAAS,CAAC4C,MAAV,CAAiBD,UAJV;AAKpBhC,EAAAA,SAAS,EAAEX,SAAS,CAAC6C,IALD;AAMpBnC,EAAAA,QAAQ,EAAEV,SAAS,CAAC8C,IANA;AAOpBjC,EAAAA,cAAc,EAAEb,SAAS,CAAC6C;AAPN,CAAtB;AAUA,eAAe5C,SAAf","sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { saturate, darken } from \"polished\";\nimport PropTypes from \"prop-types\";\n\nclass TextInput extends Component {\n  // initialize state\n  state = { value: \"\", dirty: false, errors: [] };\n\n  hasChanged = (e) => {\n    e.preventDefault();\n\n    // destructure props - assign default dummy functions to validator and onStateChanged props\n    const {\n      label,\n      required = false,\n      validator = (f) => f,\n      onStateChanged = (f) => f,\n    } = this.props;\n\n    const value = e.target.value;\n    const isEmpty = value.length === 0;\n    const requiredMissing = this.state.dirty && required && isEmpty;\n    const inputType = e.target.type;\n\n    let errors = [];\n\n    if (requiredMissing) {\n      // if required and is empty, add required error to state\n      errors = [...errors, `${label} is required`];\n    } else if (\"function\" === typeof validator) {\n      try {\n        validator(value, label);\n      } catch (e) {\n        // if validator throws error, add validation error to state\n        errors = [...errors, e.message];\n      }\n    } else if (inputType === \"tel\") {\n      try {\n        console.log(e.key);\n      } catch (error) {\n        // if validator throws error, add validation error to state\n        errors = [...errors, e.message];\n      }\n    }\n\n    // update state and call the onStateChanged callback fn after the update\n    // dirty is only changed to true and remains true on and after the first state update\n    this.setState(\n      ({ dirty = false }) => ({ value, errors, dirty: !dirty || dirty }),\n      () => onStateChanged(this.state)\n    );\n  };\n\n  render() {\n    const { value, dirty, errors } = this.state;\n    const { type, labelId, label, placeholder } = this.props;\n\n    const hasError = errors.length > 0;\n    const controlClass = [dirty ? (hasError ? \"is-invalid\" : \"is-valid\") : \"\"]\n      .join(\"\")\n      .trim();\n    const controlLabel = [\n      dirty ? (hasError ? \"label-invalid\" : \"label-valid\") : \"\",\n    ]\n      .join(\"\")\n      .trim();\n\n    return (\n      <>\n        <Container>\n          <Label htmlFor={labelId} className={controlLabel}>\n            {label}\n          </Label>\n          <Input\n            type={type}\n            className={controlClass}\n            id={labelId}\n            placeholder={placeholder}\n            value={value}\n            onChange={this.hasChanged}\n          />\n          {hasError && <ErrorWrapper>{errors[0]}</ErrorWrapper>}\n        </Container>\n      </>\n    );\n  }\n}\n\nconst Container = styled.div`\n  background: ${saturate(0.3, \"#fff\")};\n  width: 350px;\n  position: relative;\n\n  & .is-invalid {\n    border-bottom: 2px solid ${saturate(0.2, \"#F44C57\")} !important;\n  }\n\n  & .is-valid {\n    border-bottom: 2px solid ${saturate(0.2, \"#472ECD\")} !important;\n  }\n\n  & .label-invalid {\n    color: ${saturate(0.0, \"#A4A2BC\")} !important;\n  }\n\n  & .label-valid {\n    color: ${saturate(0.2, \"#472ECD\")} !important;\n  }\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  border: 0;\n  outline: none;\n  line-height: 20px;\n  font-size: 22px;\n  padding: 9px 0 15px 0px;\n  font-family: inherit;\n  background: none;\n  color: #151924;\n  caret-color: #332e4b;\n  border-bottom: 2px solid ${saturate(0.0, \"#A4A2BC\")};\n  transition: border-bottom 1s ease-in-out;\n\n  &::placeholder {\n    color: #a4a2bc;\n  }\n`;\n\nconst Label = styled.label`\n  line-height: 24px;\n  font-size: 16px;\n  font-weight: 500;\n  transition: all 0.3s ease;\n  color: ${darken(0.4, \"#332E4B\")} !important;\n  transition: color 1s ease-in-out;\n`;\n\nconst ErrorWrapper = styled.div`\n  color: ${darken(0.1, \"#F44C57\")};\n`;\n\nTextInput.propTypes = {\n  type: PropTypes.oneOf([\"text\", \"email\", \"password\", \"tel\"]).isRequired,\n  labelId: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  validator: PropTypes.func,\n  required: PropTypes.bool,\n  onStateChanged: PropTypes.func,\n};\n\nexport default TextInput;\n"]},"metadata":{},"sourceType":"module"}