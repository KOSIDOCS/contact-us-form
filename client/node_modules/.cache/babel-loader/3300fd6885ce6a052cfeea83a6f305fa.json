{"ast":null,"code":"var _jsxFileName = \"/home/kosidocs/Web Development/React-Development/contact-us-form/src/component/ContactBody/Right-column/PhoneInput.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextInput from \"./TextInput\";\n\nconst PhoneInput = props => {\n  // prevent passing type and validator props from this component to the rendered form field component\n  const {\n    type,\n    validator,\n    ...restProps\n  } = props;\n  /*******************************************************\n   * create a filter that will be used to determine\n   * which keystrokes are allowed in the input field\n   * and which are not. Since we're working exclusively\n   * with phone numbers, we'll need the following:\n   * -- digits 0 to 9 from the numeric keys\n   * -- digits 0 to 9 from the num pad keys\n   * -- arrow keys (left/right)\n   * -- backspace / delete for correcting\n   * -- tab key to allow focus to shift\n   * -- (numeric key) + for country code\n   *******************************************************/\n\n  let filter = []; //since we're looking for phone numbers, we need\n  //to allow digits 0 - 9 (they can come from either\n  //the numeric keys or the numpad)\n  // const keypadZero = 48;\n  // const numpadZero = 96;\n  //add key codes for the digits 0 - 9 into this filter\n\n  for (let key = 0; key <= 9; key++) {\n    filter.push(key);\n  } //add other keys that might be needed for navigation\n  //or for editing the keyboard input\n\n\n  filter.push(\"Backspace\"); //backspace\n\n  filter.push(\"Tab\"); //tab\n\n  filter.push(\"Delete\"); //delete\n\n  filter.push(\"ArrowLeft\"); //left arrow\n\n  filter.push(\"ArrowRight\"); //right arrow\n\n  filter.push(\"+\"); //plus key\n\n  /*******************************************************\n   * replaceAll\n   * returns a string where all occurrences of a\n   * string 'search' are replaced with another\n   * string 'replace' in a string 'src'\n   *******************************************************/\n\n  const replaceAll = (src, search, replace) => src.split(search).join(replace);\n  /*******************************************************\n   * formatPhoneText\n   * returns a string that is in XXX-XXX-XXXX format\n   *******************************************************/\n\n\n  const formatPhoneText = value => {\n    value = replaceAll(value.trim(), \"-\", \"\");\n\n    if (value.length > 3 && value.length <= 6) {\n      value = value.slice(0, 3) + \"-\" + value.slice(3);\n    } else if (value.length > 6) {\n      value = value.slice(0, 3) + \"-\" + value.slice(3, 6) + \"-\" + value.slice(6);\n    }\n\n    return value;\n  };\n  /*******************************************************\n   * validatePhone\n   * return true if the string 'p' is a valid phone\n   *******************************************************/\n\n\n  const validatePhone = p => {\n    let digits = p.replace(/\\D/g, \"\");\n    let phoneReg = /^[(]{0,1}[0-9]{3}[)]{0,1}[-\\s\\.]{0,1}[0-9]{3}[-\\s\\.]{0,1}[0-9]{4}$/;\n    return phoneReg.test(digits);\n  };\n  /*******************************************************\n   * onKeyDown(e)\n   * when a key is pressed down, check if it is allowed\n   * or not. If not allowed, prevent the key event\n   * from propagating further\n   *******************************************************/\n\n\n  const onKeyDownFunc = e => {\n    if (filter.indexOf(e.key) < 0) {\n      e.preventDefault();\n      return false;\n    }\n  };\n  /*******************************************************\n   * onKeyUp(e)\n   * when a key is pressed up, grab the contents in that\n   * input field, format them in line with XXX-XXX-XXXX\n   * format and validate if the text is infact a complete\n   * phone number. Adjust the border color based on the\n   * result of that validation\n   *******************************************************/\n\n\n  const onKeyUpFunc = e => {\n    let input = e.target;\n    let formatted = formatPhoneText(input.value);\n    if (validatePhone(formatted) || formatted.length === 0) throw new Error(`Phone is invalid`);\n  }; // const validatePhoneInput = (value, label) => {\n  //   let formatted = formatPhoneText(value);\n  //   if (validatePhone(formatted) || formatted.length === 0)\n  //     throw new Error(`${label} is invalid`);\n  // };\n\n\n  return /*#__PURE__*/React.createElement(TextInput, Object.assign({\n    type: \"tel\",\n    onKeyDown: onKeyDownFunc,\n    onKeyUp: onKeyUpFunc\n  }, restProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }));\n};\n\nPhoneInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  labelId: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  onStateChanged: PropTypes.func\n};\nexport default PhoneInput;","map":{"version":3,"sources":["/home/kosidocs/Web Development/React-Development/contact-us-form/src/component/ContactBody/Right-column/PhoneInput.jsx"],"names":["React","PropTypes","TextInput","PhoneInput","props","type","validator","restProps","filter","key","push","replaceAll","src","search","replace","split","join","formatPhoneText","value","trim","length","slice","validatePhone","p","digits","phoneReg","test","onKeyDownFunc","e","indexOf","preventDefault","onKeyUpFunc","input","target","formatted","Error","propTypes","label","string","isRequired","labelId","placeholder","required","bool","onStateChanged","func"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport TextInput from \"./TextInput\";\n\nconst PhoneInput = (props) => {\n  // prevent passing type and validator props from this component to the rendered form field component\n  const { type, validator, ...restProps } = props;\n\n  /*******************************************************\n   * create a filter that will be used to determine\n   * which keystrokes are allowed in the input field\n   * and which are not. Since we're working exclusively\n   * with phone numbers, we'll need the following:\n   * -- digits 0 to 9 from the numeric keys\n   * -- digits 0 to 9 from the num pad keys\n   * -- arrow keys (left/right)\n   * -- backspace / delete for correcting\n   * -- tab key to allow focus to shift\n   * -- (numeric key) + for country code\n   *******************************************************/\n  let filter = [];\n\n  //since we're looking for phone numbers, we need\n  //to allow digits 0 - 9 (they can come from either\n  //the numeric keys or the numpad)\n  // const keypadZero = 48;\n  // const numpadZero = 96;\n\n  //add key codes for the digits 0 - 9 into this filter\n  for (let key = 0; key <= 9; key++) {\n    filter.push(key);\n  }\n\n  //add other keys that might be needed for navigation\n  //or for editing the keyboard input\n  filter.push(\"Backspace\"); //backspace\n  filter.push(\"Tab\"); //tab\n  filter.push(\"Delete\"); //delete\n  filter.push(\"ArrowLeft\"); //left arrow\n  filter.push(\"ArrowRight\"); //right arrow\n  filter.push(\"+\"); //plus key\n\n  /*******************************************************\n   * replaceAll\n   * returns a string where all occurrences of a\n   * string 'search' are replaced with another\n   * string 'replace' in a string 'src'\n   *******************************************************/\n  const replaceAll = (src, search, replace) => src.split(search).join(replace);\n\n  /*******************************************************\n   * formatPhoneText\n   * returns a string that is in XXX-XXX-XXXX format\n   *******************************************************/\n  const formatPhoneText = (value) => {\n    value = replaceAll(value.trim(), \"-\", \"\");\n\n    if (value.length > 3 && value.length <= 6) {\n      value = value.slice(0, 3) + \"-\" + value.slice(3);\n    } else if (value.length > 6) {\n      value =\n        value.slice(0, 3) + \"-\" + value.slice(3, 6) + \"-\" + value.slice(6);\n    }\n    return value;\n  };\n\n  /*******************************************************\n   * validatePhone\n   * return true if the string 'p' is a valid phone\n   *******************************************************/\n  const validatePhone = (p) => {\n    let digits = p.replace(/\\D/g, \"\");\n    let phoneReg = /^[(]{0,1}[0-9]{3}[)]{0,1}[-\\s\\.]{0,1}[0-9]{3}[-\\s\\.]{0,1}[0-9]{4}$/;\n    return phoneReg.test(digits);\n  };\n\n  /*******************************************************\n   * onKeyDown(e)\n   * when a key is pressed down, check if it is allowed\n   * or not. If not allowed, prevent the key event\n   * from propagating further\n   *******************************************************/\n  const onKeyDownFunc = (e) => {\n    if (filter.indexOf(e.key) < 0) {\n      e.preventDefault();\n      return false;\n    }\n  };\n\n  /*******************************************************\n   * onKeyUp(e)\n   * when a key is pressed up, grab the contents in that\n   * input field, format them in line with XXX-XXX-XXXX\n   * format and validate if the text is infact a complete\n   * phone number. Adjust the border color based on the\n   * result of that validation\n   *******************************************************/\n  const onKeyUpFunc = (e) => {\n    let input = e.target;\n    let formatted = formatPhoneText(input.value);\n    if (validatePhone(formatted) || formatted.length === 0)\n      throw new Error(`Phone is invalid`);\n  };\n\n  // const validatePhoneInput = (value, label) => {\n  //   let formatted = formatPhoneText(value);\n  //   if (validatePhone(formatted) || formatted.length === 0)\n  //     throw new Error(`${label} is invalid`);\n  // };\n\n  return (\n    <TextInput\n      type=\"tel\"\n      onKeyDown={onKeyDownFunc}\n      onKeyUp={onKeyUpFunc}\n      {...restProps}\n    />\n  );\n};\n\nPhoneInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  labelId: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  onStateChanged: PropTypes.func,\n};\n\nexport default PhoneInput;\n"]},"metadata":{},"sourceType":"module"}