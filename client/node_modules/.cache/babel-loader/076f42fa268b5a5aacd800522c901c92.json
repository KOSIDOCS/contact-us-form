{"ast":null,"code":"import _objectWithoutProperties from\"/home/kosidocs/Web Development/React-Development/contact-us-form/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React from\"react\";import TextInput from\"./TextInput\";var PhoneInput=function PhoneInput(props){// prevent passing type and validator props from this component to the rendered form field component\nvar type=props.type,validator=props.validator,restProps=_objectWithoutProperties(props,[\"type\",\"validator\"]);var validatePhoneInput=function validatePhoneInput(value,label){var regex=/^[+][(]{0,1}[0-9]{3}[)]{0,1}[\\s.]{0,1}[0-9]{2}[\\s.]{0,1}[0-9]{3}[\\s.]{0,1}[0-9]{4}$/;if(!regex.test(value))throw new Error(\"\".concat(label,\" is invalid\"));};return/*#__PURE__*/React.createElement(TextInput,Object.assign({type:\"tel\",validator:validatePhoneInput},restProps));};export default PhoneInput;","map":{"version":3,"sources":["/home/kosidocs/Web Development/React-Development/contact-us-form/src/component/ContactBody/Right-column/PhoneInput.jsx"],"names":["React","TextInput","PhoneInput","props","type","validator","restProps","validatePhoneInput","value","label","regex","test","Error"],"mappings":"uKAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAGA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CAC5B;AAD4B,GAEpBC,CAAAA,IAFoB,CAEcD,KAFd,CAEpBC,IAFoB,CAEdC,SAFc,CAEcF,KAFd,CAEdE,SAFc,CAEAC,SAFA,0BAEcH,KAFd,uBAI5B,GAAMI,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAAQC,KAAR,CAAkB,CAC3C,GAAMC,CAAAA,KAAK,CAAG,qFAAd,CACA,GAAI,CAACA,KAAK,CAACC,IAAN,CAAWH,KAAX,CAAL,CAAwB,KAAM,IAAII,CAAAA,KAAJ,WAAaH,KAAb,gBAAN,CACzB,CAHD,CAKA,mBAAO,oBAAC,SAAD,gBAAW,IAAI,CAAC,KAAhB,CAAsB,SAAS,CAAEF,kBAAjC,EAAyDD,SAAzD,EAAP,CACD,CAVD,CAoBA,cAAeJ,CAAAA,UAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport TextInput from \"./TextInput\";\n\nconst PhoneInput = (props) => {\n  // prevent passing type and validator props from this component to the rendered form field component\n  const { type, validator, ...restProps } = props;\n\n  const validatePhoneInput = (value, label) => {\n    const regex = /^[+][(]{0,1}[0-9]{3}[)]{0,1}[\\s.]{0,1}[0-9]{2}[\\s.]{0,1}[0-9]{3}[\\s.]{0,1}[0-9]{4}$/;\n    if (!regex.test(value)) throw new Error(`${label} is invalid`);\n  };\n\n  return <TextInput type=\"tel\" validator={validatePhoneInput} {...restProps} />;\n};\n\nPhoneInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  labelId: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  onStateChanged: PropTypes.func,\n};\n\nexport default PhoneInput;\n"]},"metadata":{},"sourceType":"module"}