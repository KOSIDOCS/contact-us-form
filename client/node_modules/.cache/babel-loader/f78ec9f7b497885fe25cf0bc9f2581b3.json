{"ast":null,"code":"var _jsxFileName = \"/home/kosidocs/Web Development/React-Development/contact-us-form/src/component/ContactBody/Right-column/TextInput.jsx\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { saturate, darken } from \"polished\";\nimport PropTypes from \"prop-types\";\n\nconst TextInput = props => {\n  const [inputState, setInputState] = useState({\n    value: \"\",\n    dirty: false,\n    errors: []\n  });\n  console.log(inputState);\n\n  const handleChange = e => {\n    e.preventDefault(); // destructure props - assign default dummy functions to validator and onStateChanged props\n\n    const {\n      label,\n      required = false,\n      validator = f => f\n    } = props;\n    const value = e.target.value;\n    const isEmpty = value.length === 0;\n    const requiredMissing = inputState.dirty && required && isEmpty;\n    let errors = [];\n\n    if (requiredMissing) {\n      // if required and is empty, add required error to state\n      errors = [...errors, `${label} is required`];\n    } else if (\"function\" === typeof validator) {\n      try {\n        validator(value);\n      } catch (e) {\n        // if validator throws error, add validation error to state\n        errors = [...errors, e.message];\n      }\n    } // update state and call the onStateChanged callback fn after the update\n    // dirty is only changed to true and remains true on the after the first state update\n    // setInputState(\n    //   ({ dirty = false }) => ({ value, errors, dirty: !dirty || dirty }),\n    //   () => onStateChanged(inputState)\n    // );\n\n\n    setInputState(prevValue => {\n      return {\n        value: value,\n        errors: errors,\n        dirty: !dirty || dirty\n      };\n    });\n  };\n\n  const {\n    value,\n    dirty,\n    errors\n  } = inputState;\n  const {\n    type,\n    labelId,\n    label,\n    placeholder\n  } = props;\n  const hasError = errors.length > 0;\n  const controlClass = [dirty ? hasError ? \"is-invalid\" : \"is-valid\" : \"\"].join(\"\").trim();\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    className: controlClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: labelId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, label), /*#__PURE__*/React.createElement(Input, {\n    type: type,\n    id: labelId,\n    placeholder: placeholder,\n    value: value,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  })), hasError && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 20\n    }\n  }, errors[0]));\n};\n\nconst Wrapper = styled.div`\n  width: 350px;\n  position: relative;\n  margin: 30px;\n`;\nconst Container = styled.div`\n  background: ${saturate(0.3, \"#fff\")};\n  padding: 16px 0 5px 0;\n  width: 350px;\n  border-bottom: 2px solid ${saturate(0.0, \"#A4A2BC\")};\n  position: relative;\n\n  & .is-invalid {\n    border-bottom: 2px solid ${saturate(0.2, \"#F44C57\")} !important;\n  }\n\n  & .is-valid {\n    border-bottom: 2px solid ${saturate(0.2, \"#472ECD\")} !important;\n  }\n`;\nconst Input = styled.input`\n  width: 100%;\n  border: 0;\n  outline: none;\n  line-height: 20px;\n  font-size: 22px;\n  padding: 9px 0 10px 0px;\n  font-family: inherit;\n  background: none;\n  color: #151924;\n  caret-color: #332e4b;\n\n  &::placeholder {\n    color: #a4a2bc;\n  }\n`;\nconst Label = styled.label`\n  line-height: 24px;\n  font-size: 16px;\n  font-weight: 500;\n  transition: all 0.3s ease;\n  color: ${darken(0.4, \"#332E4B\")};\n`;\nTextInput.propTypes = {\n  type: PropTypes.oneOf([\"text\", \"password\", \"tel\"]).isRequired,\n  labelId: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  validator: PropTypes.func,\n  required: PropTypes.bool\n};\nexport default TextInput;","map":{"version":3,"sources":["/home/kosidocs/Web Development/React-Development/contact-us-form/src/component/ContactBody/Right-column/TextInput.jsx"],"names":["React","useState","styled","saturate","darken","PropTypes","TextInput","props","inputState","setInputState","value","dirty","errors","console","log","handleChange","e","preventDefault","label","required","validator","f","target","isEmpty","length","requiredMissing","message","prevValue","type","labelId","placeholder","hasError","controlClass","join","trim","Wrapper","div","Container","Input","input","Label","propTypes","oneOf","isRequired","string","func","bool"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { saturate, darken } from \"polished\";\nimport PropTypes from \"prop-types\";\n\nconst TextInput = (props) => {\n  const [inputState, setInputState] = useState({\n    value: \"\",\n    dirty: false,\n    errors: [],\n  });\n\n  console.log(inputState);\n\n  const handleChange = (e) => {\n    e.preventDefault();\n\n    // destructure props - assign default dummy functions to validator and onStateChanged props\n    const { label, required = false, validator = (f) => f } = props;\n\n    const value = e.target.value;\n    const isEmpty = value.length === 0;\n    const requiredMissing = inputState.dirty && required && isEmpty;\n\n    let errors = [];\n\n    if (requiredMissing) {\n      // if required and is empty, add required error to state\n      errors = [...errors, `${label} is required`];\n    } else if (\"function\" === typeof validator) {\n      try {\n        validator(value);\n      } catch (e) {\n        // if validator throws error, add validation error to state\n        errors = [...errors, e.message];\n      }\n    }\n\n    // update state and call the onStateChanged callback fn after the update\n    // dirty is only changed to true and remains true on the after the first state update\n    // setInputState(\n    //   ({ dirty = false }) => ({ value, errors, dirty: !dirty || dirty }),\n    //   () => onStateChanged(inputState)\n    // );\n\n    setInputState((prevValue) => {\n      return {\n        value: value,\n        errors: errors,\n        dirty: !dirty || dirty,\n      };\n    });\n  };\n\n  const { value, dirty, errors } = inputState;\n  const { type, labelId, label, placeholder } = props;\n\n  const hasError = errors.length > 0;\n  const controlClass = [dirty ? (hasError ? \"is-invalid\" : \"is-valid\") : \"\"]\n    .join(\"\")\n    .trim();\n\n  return (\n    <Wrapper>\n      <Container className={controlClass}>\n        <Label htmlFor={labelId}>{label}</Label>\n        <Input\n          type={type}\n          id={labelId}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleChange}\n        />\n      </Container>\n      {hasError && <div>{errors[0]}</div>}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  width: 350px;\n  position: relative;\n  margin: 30px;\n`;\n\nconst Container = styled.div`\n  background: ${saturate(0.3, \"#fff\")};\n  padding: 16px 0 5px 0;\n  width: 350px;\n  border-bottom: 2px solid ${saturate(0.0, \"#A4A2BC\")};\n  position: relative;\n\n  & .is-invalid {\n    border-bottom: 2px solid ${saturate(0.2, \"#F44C57\")} !important;\n  }\n\n  & .is-valid {\n    border-bottom: 2px solid ${saturate(0.2, \"#472ECD\")} !important;\n  }\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  border: 0;\n  outline: none;\n  line-height: 20px;\n  font-size: 22px;\n  padding: 9px 0 10px 0px;\n  font-family: inherit;\n  background: none;\n  color: #151924;\n  caret-color: #332e4b;\n\n  &::placeholder {\n    color: #a4a2bc;\n  }\n`;\n\nconst Label = styled.label`\n  line-height: 24px;\n  font-size: 16px;\n  font-weight: 500;\n  transition: all 0.3s ease;\n  color: ${darken(0.4, \"#332E4B\")};\n`;\n\nTextInput.propTypes = {\n  type: PropTypes.oneOf([\"text\", \"password\", \"tel\"]).isRequired,\n  labelId: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  validator: PropTypes.func,\n  required: PropTypes.bool,\n};\n\nexport default TextInput;\n"]},"metadata":{},"sourceType":"module"}