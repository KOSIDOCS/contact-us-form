{"ast":null,"code":"var _jsxFileName = \"/home/kosidocs/Web Development/React-Development/contact-us-form/src/component/ContactBody/Right-column/PhoneInput.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextInput from \"./TextInput\";\n\nconst PhoneInput = props => {\n  // prevent passing type and validator props from this component to the rendered form field component\n  const {\n    type,\n    validator,\n    ...restProps\n  } = props;\n\n  const validatePhoneInput = (value, label) => {\n    const regex = /^[+][(]{0,1}[0-9]{3}[)]{0,1}[\\s.]{0,1}[0-9]{2}[\\s.]{0,1}[0-9]{3}[\\s.]{0,1}[0-9]{4}$/;\n    if (!regex.test(value)) throw new Error(`${label} is invalid`);\n  };\n\n  return /*#__PURE__*/React.createElement(TextInput, Object.assign({\n    type: \"tel\",\n    validator: validatePhoneInput\n  }, restProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 10\n    }\n  }));\n};\n\nPhoneInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  labelId: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  onStateChanged: PropTypes.func\n};\nexport default PhoneInput;","map":{"version":3,"sources":["/home/kosidocs/Web Development/React-Development/contact-us-form/src/component/ContactBody/Right-column/PhoneInput.jsx"],"names":["React","PropTypes","TextInput","PhoneInput","props","type","validator","restProps","validatePhoneInput","value","label","regex","test","Error","propTypes","string","isRequired","labelId","placeholder","required","bool","onStateChanged","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,SAAR;AAAmB,OAAGC;AAAtB,MAAoCH,KAA1C;;AAEA,QAAMI,kBAAkB,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC3C,UAAMC,KAAK,GAAG,qFAAd;AACA,QAAI,CAACA,KAAK,CAACC,IAAN,CAAWH,KAAX,CAAL,EAAwB,MAAM,IAAII,KAAJ,CAAW,GAAEH,KAAM,aAAnB,CAAN;AACzB,GAHD;;AAKA,sBAAO,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,KAAhB;AAAsB,IAAA,SAAS,EAAEF;AAAjC,KAAyDD,SAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAVD;;AAYAJ,UAAU,CAACW,SAAX,GAAuB;AACrBJ,EAAAA,KAAK,EAAET,SAAS,CAACc,MAAV,CAAiBC,UADH;AAErBC,EAAAA,OAAO,EAAEhB,SAAS,CAACc,MAAV,CAAiBC,UAFL;AAGrBE,EAAAA,WAAW,EAAEjB,SAAS,CAACc,MAAV,CAAiBC,UAHT;AAIrBG,EAAAA,QAAQ,EAAElB,SAAS,CAACmB,IAJC;AAKrBC,EAAAA,cAAc,EAAEpB,SAAS,CAACqB;AALL,CAAvB;AAQA,eAAenB,UAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport TextInput from \"./TextInput\";\n\nconst PhoneInput = (props) => {\n  // prevent passing type and validator props from this component to the rendered form field component\n  const { type, validator, ...restProps } = props;\n\n  const validatePhoneInput = (value, label) => {\n    const regex = /^[+][(]{0,1}[0-9]{3}[)]{0,1}[\\s.]{0,1}[0-9]{2}[\\s.]{0,1}[0-9]{3}[\\s.]{0,1}[0-9]{4}$/;\n    if (!regex.test(value)) throw new Error(`${label} is invalid`);\n  };\n\n  return <TextInput type=\"tel\" validator={validatePhoneInput} {...restProps} />;\n};\n\nPhoneInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  labelId: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  onStateChanged: PropTypes.func,\n};\n\nexport default PhoneInput;\n"]},"metadata":{},"sourceType":"module"}